name: Build java-cef

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:
  schedule:
    # Run weekly to catch any dependency updates
    - cron: '0 0 * * 0'

env:
  JAVA_VERSION: '8'
  CMAKE_BUILD_TYPE: 'Release'

jobs:
  java-cef-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Upload mask
        run: echo "::add-mask::${{ secrets.UPLOAD_URL }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ matrix.platform }}-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-deps-
      
      - name: Install dependencies and build
        run: |
          sudo apt update
          sudo apt install build-essential g++ cmake ninja-build python3 libgtk2.0-dev s3cmd -y
          
          # Install additional dependencies for CEF
          sudo apt install libx11-dev libxrandr-dev libxi-dev libxss-dev libgconf-2-4 \
                          libxdamage-dev libxcomposite-dev libasound2-dev libatk1.0-dev \
                          libgtk-3-dev libdrm-dev libxss-dev libgconf-2-4 -y
          
          # Navigate to java-cef directory and create build directory
          cd common/java-cef
          mkdir jcef_build && cd jcef_build
          
          # Configure with CMake - more explicit configuration
          cmake -G "Ninja" \
                -DPROJECT_ARCH=${{ matrix.platform }} \
                -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                -DCEF_USE_SANDBOX=OFF \
                ..
          
          # Build with Ninja (limit parallel jobs to prevent OOM)
          ninja -j2
          
          # Verify build output exists
          if [ ! -d "native/Release" ]; then
            echo "Build failed: native/Release directory not found"
            exit 1
          fi
          
          # Package the build
          mv native/Release linux_${{ matrix.platform }}
          
          # Strip binaries to reduce size
          find linux_${{ matrix.platform }} -name "*.so" -exec strip {} \;
          
          # Create archive
          tar -czf linux_${{ matrix.platform }}.tar.gz linux_${{ matrix.platform }}
          sha256sum linux_${{ matrix.platform }}.tar.gz > linux_${{ matrix.platform }}.tar.gz.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.platform }}
          path: |
            common/java-cef/jcef_build/linux_${{ matrix.platform }}.tar.gz
            common/java-cef/jcef_build/linux_${{ matrix.platform }}.tar.gz.sha256
      
      - name: Copy s3cfg
        if: ${{ env.S3_CFG != '' }}
        run: echo "${{ secrets.S3_CFG }}" > ~/.s3cfg
      
      - name: Upload to S3
        if: ${{ env.S3_CFG != '' && github.ref == 'refs/heads/master' }}
        run: |
          s3cmd put -P common/java-cef/jcef_build/linux_${{ matrix.platform }}.tar.gz s3://mcef-us-1/java-cef-builds/${{ github.sha }}/linux_${{ matrix.platform }}.tar.gz
          s3cmd put -P common/java-cef/jcef_build/linux_${{ matrix.platform }}.tar.gz.sha256 s3://mcef-us-1/java-cef-builds/${{ github.sha }}/linux_${{ matrix.platform }}.tar.gz.sha256
        env:
          S3_CFG: ${{ secrets.S3_CFG }}

  java-cef-windows:
    runs-on: windows-2022
    timeout-minutes: 150
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Upload mask
        run: echo "::add-mask::${{ secrets.UPLOAD_URL }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\.gradle\caches
            ~\.gradle\wrapper
          key: ${{ runner.os }}-${{ matrix.platform }}-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-deps-
      
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.platform == 'amd64' && 'x64' || 'arm64' }}
      
      - name: Install dependencies
        run: |
          pip install python-dateutil
          Invoke-WebRequest -Uri "https://github.com/s3tools/s3cmd/archive/master.zip" -OutFile "D:\s3cmd.zip"
          Expand-Archive -Path "D:\s3cmd.zip" -DestinationPath "D:\s3cmd"
      
      - name: Build
        run: |
          cd common/java-cef
          mkdir jcef_build && cd jcef_build
          cmake -G "Ninja" -DPROJECT_ARCH=${{ matrix.platform }} -DCMAKE_BUILD_TYPE=Release ..
          ninja -j4
          cd native
          ren Release windows_${{ matrix.platform }}
          cd ..
          move native/windows_${{ matrix.platform }} windows_${{ matrix.platform }}
          tar -czf windows_${{ matrix.platform }}.tar.gz windows_${{ matrix.platform }}
          Get-FileHash -Algorithm SHA256 -Path "windows_${{ matrix.platform }}.tar.gz" | Select-Object Hash | Out-File "windows_${{ matrix.platform }}.tar.gz.sha256" -Encoding ASCII
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.platform }}
          path: |
            common/java-cef/jcef_build/windows_${{ matrix.platform }}.tar.gz
            common/java-cef/jcef_build/windows_${{ matrix.platform }}.tar.gz.sha256
      
      - name: Copy s3cfg
        if: ${{ env.S3_CFG != '' }}
        run: echo "${{ secrets.S3_CFG }}" > "$HOME\AppData\Roaming\s3cmd.ini"
      
      - name: Upload to S3
        if: ${{ env.S3_CFG != '' && github.ref == 'refs/heads/master' }}
        run: |
          python D:\s3cmd\s3cmd-master\s3cmd put -P common\java-cef\jcef_build\windows_${{ matrix.platform }}.tar.gz s3://mcef-us-1/java-cef-builds/${{ github.sha }}/windows_${{ matrix.platform }}.tar.gz
          python D:\s3cmd\s3cmd-master\s3cmd put -P common\java-cef\jcef_build\windows_${{ matrix.platform }}.tar.gz.sha256 s3://mcef-us-1/java-cef-builds/${{ github.sha }}/windows_${{ matrix.platform }}.tar.gz.sha256
        env:
          S3_CFG: ${{ secrets.S3_CFG }}

  java-cef-macos-amd64:
    runs-on: macos-13
    timeout-minutes: 150
    steps:
      - name: Upload mask
        run: echo "::add-mask::${{ secrets.UPLOAD_URL }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-amd64-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-amd64-deps-
      
      - name: Install dependencies and build
        run: |
          # Update Homebrew and install dependencies
          brew update
          brew install ninja coreutils s3cmd cmake
          
          # Set Xcode version (use available version, don't force specific one)
          sudo xcode-select --print-path
          
          # Navigate to java-cef directory and create build directory
          cd common/java-cef
          mkdir jcef_build && cd jcef_build
          
          # Configure with CMake - more explicit for macOS
          cmake -G "Ninja" \
                -DPROJECT_ARCH=amd64 \
                -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                -DCEF_USE_SANDBOX=OFF \
                ..
          
          # Build with limited parallelism for macOS runners
          ninja -j2
          
          # Verify build output
          if [ ! -d "native/Release" ]; then
            echo "Build failed: native/Release directory not found"
            ls -la native/ || echo "native directory doesn't exist"
            exit 1
          fi
          
          # Package the build
          mv native/Release macos_amd64
          tar -czf macos_amd64.tar.gz macos_amd64
          shasum -a 256 macos_amd64.tar.gz > macos_amd64.tar.gz.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-amd64
          path: |
            common/java-cef/jcef_build/macos_amd64.tar.gz
            common/java-cef/jcef_build/macos_amd64.tar.gz.sha256
      
      - name: Copy s3cfg
        if: ${{ env.S3_CFG != '' }}
        run: echo "${{ secrets.S3_CFG }}" > ~/.s3cfg
      
      - name: Upload to S3
        if: ${{ env.S3_CFG != '' && github.ref == 'refs/heads/master' }}
        run: |
          s3cmd put -P common/java-cef/jcef_build/macos_amd64.tar.gz s3://mcef-us-1/java-cef-builds/${{ github.sha }}/macos_amd64.tar.gz
          s3cmd put -P common/java-cef/jcef_build/macos_amd64.tar.gz.sha256 s3://mcef-us-1/java-cef-builds/${{ github.sha }}/macos_amd64.tar.gz.sha256
        env:
          S3_CFG: ${{ secrets.S3_CFG }}

  java-cef-macos-arm64:
    runs-on: macos-14
    timeout-minutes: 150
    steps:
      - name: Upload mask
        run: echo "::add-mask::${{ secrets.UPLOAD_URL }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-arm64-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-arm64-deps-
      
      - name: Install dependencies and build
        run: |
          # Update Homebrew and install dependencies
          brew update
          brew install ninja coreutils s3cmd cmake
          
          # Set Xcode version (use available version, don't force specific one)
          sudo xcode-select --print-path
          
          # Navigate to java-cef directory and create build directory
          cd common/java-cef
          mkdir jcef_build && cd jcef_build
          
          # Configure with CMake - more explicit for macOS
          cmake -G "Ninja" \
                -DPROJECT_ARCH=arm64 \
                -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
                -DCEF_USE_SANDBOX=OFF \
                ..
          
          # Build with limited parallelism for macOS runners
          ninja -j2
          
          # Verify build output
          if [ ! -d "native/Release" ]; then
            echo "Build failed: native/Release directory not found"
            ls -la native/ || echo "native directory doesn't exist"
            exit 1
          fi
          
          # Package the build
          mv native/Release macos_arm64
          tar -czf macos_arm64.tar.gz macos_arm64
          shasum -a 256 macos_arm64.tar.gz > macos_arm64.tar.gz.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: |
            common/java-cef/jcef_build/macos_arm64.tar.gz
            common/java-cef/jcef_build/macos_arm64.tar.gz.sha256
      
      - name: Copy s3cfg
        if: ${{ env.S3_CFG != '' }}
        run: echo "${{ secrets.S3_CFG }}" > ~/.s3cfg
      
      - name: Upload to S3
        if: ${{ env.S3_CFG != '' && github.ref == 'refs/heads/master' }}
        run: |
          s3cmd put -P common/java-cef/jcef_build/macos_arm64.tar.gz s3://mcef-us-1/java-cef-builds/${{ github.sha }}/macos_arm64.tar.gz
          s3cmd put -P common/java-cef/jcef_build/macos_arm64.tar.gz.sha256 s3://mcef-us-1/java-cef-builds/${{ github.sha }}/macos_arm64.tar.gz.sha256
        env:
          S3_CFG: ${{ secrets.S3_CFG }}

  create-release:
    needs: [java-cef-linux, java-cef-windows, java-cef-macos-amd64, java-cef-macos-arm64]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.sha }}
          name: Java-CEF Build ${{ github.sha }}
          body: |
            Automated build of java-cef
            
            **Commit:** ${{ github.sha }}
            **Date:** ${{ github.event.head_commit.timestamp }}
            
            ### Available platforms:
            - Linux: amd64, arm64
            - Windows: amd64, arm64  
            - macOS: amd64, arm64
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.sha256
          prerelease: true
